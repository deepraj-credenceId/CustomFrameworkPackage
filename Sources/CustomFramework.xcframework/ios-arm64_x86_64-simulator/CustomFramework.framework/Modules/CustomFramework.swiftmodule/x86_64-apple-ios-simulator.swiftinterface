// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios17.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CustomFramework
import CoreBluetooth
import CoreNFC
import CryptoKit
@_exported import CustomFramework
import Foundation
import Security
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.String : Swift.Error {
}
public enum DataIdentifier : Swift.String, Swift.CaseIterable {
  case FamilyName
  case GivenNames
  case dateOfBirth
  case IssueDate
  case ExpiryDate
  case IssuingCountry
  case IssuingAuthority
  case DocumentNumber
  case Portrait
  case DrivingPrivileges
  case UnDistinguishingSign
  case AdministrativeNumber
  case Sex
  case Height
  case Weight
  case EyeColor
  case HairColor
  case BirthPlace
  case ResidentAddress
  case PortraitCaptureDate
  case AgeInYears
  case AgeBirthYear
  case AgeOverNN
  case AgeOver18
  case ageOver21
  case IssuingJurisdiction
  case Nationality
  case ResidentCity
  case ResidentState
  case ResidentPostalCode
  case ResidentCountry
  case BiometricTemplateXX
  case FamilyNameNationalCharacter
  case GivenNameNationalCharacter
  case SignatureUsualMark
  case vehicleCategoryCode
  case codes
  case age
  public init?(rawValue: Swift.String)
  public typealias AllCases = [CustomFramework.DataIdentifier]
  public typealias RawValue = Swift.String
  public static var allCases: [CustomFramework.DataIdentifier] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension CustomFramework.DataIdentifier : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
precedencegroup ExponentiationPrecedence {
  associativity: left
  higherThan: MultiplicationPrecedence
  lowerThan: BitwiseShiftPrecedence
}
infix operator ** : ExponentiationPrecedence
public struct SDK {
  public static func configure(apiKeu: Swift.String)
  public static func doSomeWork()
}
extension ObjectiveC.NSObject : Any {
}
@_hasMissingDesignatedInitializers public class SDKManager {
  public static let shared: CustomFramework.SDKManager
  public func configure(readerCertificate: Foundation.Data, readerCertificatePrivateKey: Foundation.Data, issuerCertificates: [Foundation.Data], selectedDataIdentifier: [CustomFramework.DataIdentifier])
  public func createMdlRequest(from qrCode: Swift.String)
  public func createMdlRequestFromNFC()
  @objc deinit
}
extension CustomFramework.DataIdentifier : Swift.Equatable {}
extension CustomFramework.DataIdentifier : Swift.Hashable {}
extension CustomFramework.DataIdentifier : Swift.RawRepresentable {}
